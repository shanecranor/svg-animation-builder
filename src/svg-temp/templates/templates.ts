export const base = `
<svg id="generated by svgzip.com" xmlns="http://www.w3.org/2000/svg" width="100%" height="100%">
  <defs>
  {{patterns}}
  </defs>
  {{instances}}
</svg>`;

export const rectangle = `
<pattern id="svgzip-patternId-{{id}}" patternTransform="rotate({{angle}})" width="100%" height="{{totalHeight}}" x="0" y="0" patternUnits="userSpaceOnUse">
<animate attributeName="y" begin="0s" dur="{{animationSpeed}}s" from="0" to="5000px" repeatCount="indefinite" fill="freeze"/>
<g>
  <rect x="{{xOffset}}" y="{{yOffset}}" width="100%" height="{{thickness}}" fill="{{fill}}"/>
</g>
</pattern>`;
//possible to also add some kind of additional data that tells the program what kind of form input to put on the frontend
export const instance = `<rect x="0" y="0" width="100%" height="100%" fill="url(#{{url}})"/>`;

export function createPatternFromTemplate(template: string, values: any) {
  return template.replace(/{{(.*?)}}/g, (_, key) => {
    const trimmedKey = key.trim();
    if (!(trimmedKey in values)) {
      throw new Error(`Missing value for key: ${trimmedKey}`);
    }
    return values[trimmedKey];
  });
}

const pp = [
  {
    pattern: "rectangle",
    params: {
      angle: -45,
      totalHeight: 60,
      animationSpeed: 200,
      xOffset: 0,
      yOffset: 0,
      thickness: 5,
      fill: "rgba(255,255,0,1)",
    },
  },
];
//could use AI to turn **any** uploaded SVG into a template O_O
export function buildSvgString(patternParams: any[]) {
  let patterns = "";
  let instances = "";
  for (let i = 0; i < patternParams.length; i++) {
    const template = rectangle; //TODO: add switch statement
    const params = patternParams[i].params;
    params.id = i;
    console.log(params);
    patterns += createPatternFromTemplate(template, params);
    instances += createPatternFromTemplate(instance, {
      url: `svgzip-patternId-${i}`,
    });
  }
  return createPatternFromTemplate(base, { patterns, instances });
}

export const test = buildSvgString(pp);
